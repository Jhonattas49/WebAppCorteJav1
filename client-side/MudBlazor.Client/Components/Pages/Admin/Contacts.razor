@using MudBlazor.Client.Shared.Enums
@using MudBlazor.Client.Shared.Services
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@using System.Diagnostics.CodeAnalysis

<MudField Label=@Label Variant=@Variant ErrorText=@MessageError Error=@Error>
    <MudGrid>
        <MudItem xs="9" md="3" lg="3">
            <MudSelect @bind-Value="selectedCountry" Label="Cod Pais" Variant="Variant.Text">
                @foreach (var item in Enum.GetValues(typeof(CountryFlagIconEnuns)).Cast<CountryFlagIconEnuns>())
                {
                    <MudSelectItem Value="@item">
                        <img src="@item.GetIcon()" height="14" class="mr-1" /> @item
                    </MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="4" md="2" lg="2">
            <MudNumericField HideSpinButtons="true" @bind-Value="DDD" Label="DDD" Variant="Variant.Text" Min="1" />
        </MudItem>
        <MudItem xs="8" md="7" lg="7">
            <MudTextField Class="col-md-7" Label="Telefone"
                          @bind-Value="CurrentContact"
                          OnBlur="OnBlur"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Add"
                          OnAdornmentClick="OnAdornmentClick"
                          AdornmentAriaLabel="Adicionar Contato" Error=@Error />
        </MudItem>
        <MudItem xs="12" md="12" lg="12">
            @if (Value is not null && Value.Any())
                {
                <MudChipSet T="bool" CheckMark>
                    @foreach (var item in Value.Select((x, index) => new { x, index }))
                    {
                        <MudChip Text="purple" Color="Color.Primary" Value="@item.x?.number">@item.x?.number</MudChip>
@*                         <MudPaper Class="pa-3">@item.x?.number</MudPaper>
 *@                    }
                    </MudChipSet>
                }
        </MudItem>

    </MudGrid>
</MudField>

@code {
    [NotEmptyList(ErrorMessage = "Pelo menos um contato é obrigatório.")]
    [Parameter] public List<Contact?>? Value { get; set; } = new List<Contact?>();
    [Parameter] public EventCallback<List<Contact?>> ValueChanged { get; set; }
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public Variant Variant { get; set; } = default!;
    private CountryFlagIconEnuns selectedCountry { get; set; } = CountryFlagIconEnuns.Brazil;
    private int DDD { get; set; } = 011;
    private MudForm form = default!;
    private bool Error = false;
    private string MessageError = string.Empty;
    private string CurrentContact { get; set; } = string.Empty;

    public async Task OnBlur()
    {
        var validate = await Validate();
        if (!validate && string.IsNullOrEmpty(CurrentContact)) return;
        await AddContact();
    }

    private void OnValueChanged(List<Contact?> newValue)
    {
        Value = newValue;
        ValueChanged.InvokeAsync(newValue);
    }

    public async Task<bool> Validate()
    {
        var validationResults = new List<ValidationResult>();
        var validationContext = new ValidationContext(this);
        bool isValid = Validator.TryValidateObject(this, validationContext, validationResults, true);

        if (!isValid)
        {
            MessageError = validationResults.FirstOrDefault()?.ErrorMessage ?? "Erro de validação desconhecido.";
            Error = true;
        }
        else
        {
            Error = false;
            MessageError = string.Empty;
        }

        return await Task.FromResult(isValid);
    }

    private async void OnAdornmentClick()
    {
        await AddContact();
    }

    private async Task AddContact()
    { 

        if (!string.IsNullOrEmpty(CurrentContact) && (Value is null || !Value!.Any(x => x!.number == CurrentContact)))
        {
            CurrentContact = "+" + selectedCountry.GetValue() + "(" + DDD + ")" + RemoveDDD(selectedCountry, CurrentContact);
            if (Value!.FirstOrDefault(x => x!.number.Equals(CurrentContact)) is not null)
            {
                return;
            }
            if (Value == null) Value = new List<Contact?>();
            var newContact = new Contact { number = CurrentContact, isActive = true };
            Value.Add(newContact);
            await ValueChanged.InvokeAsync(Value);
            await Validate();

            CurrentContact = string.Empty; // Clear the input after adding
        }
    }

    public static string RemoveDDD(CountryFlagIconEnuns selectedCountry, string phoneNumber)
    {
        string pattern;

        // Define the regex pattern based on the country code
        switch (selectedCountry)
        {
            case CountryFlagIconEnuns.Brazil:
                pattern = @"^\(?(\d{2})\)?\s?(\d+)$"; // For Brazil, captures (DD) number
                break;
            // Add cases for other countries as needed
            default:
                pattern = @"^\(?(\d{2})\)?\s?(\d+)$"; // Default pattern
                break;
        }

        var regex = new Regex(pattern);
        var match = regex.Match(phoneNumber);

        if (match.Success)
        {
            // Group 2 captures the phone number without DDD
            return match.Groups[2].Value;
        }

        // If the pattern doesn't match, return the original phone number
        return phoneNumber;
    }
}

